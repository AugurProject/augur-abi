/* eslint-env mocha */

"use strict";

var assert = require("chai").assert;
var abiDecodeRpcResponse = require("../src/abi-decode-rpc-response");

describe("abiDecodeRpcResponse", function () {
  var test = function (t) {
    it(t.description, function () {
      t.assertions(abiDecodeRpcResponse(t.params.responseType, t.params.abiEncodedRpcResponse));
    });
  };
  test({
    description: "('bool', '0x0000000000000000000000000000000000000000000000000000000000000000') -> false",
    params: {
      responseType: "bool",
      abiEncodedRpcResponse: "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, false);
    }
  });
  test({
    description: "('bool', '0x0000000000000000000000000000000000000000000000000000000000000001') -> true",
    params: {
      responseType: "bool",
      abiEncodedRpcResponse: "0x0000000000000000000000000000000000000000000000000000000000000001"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, true);
    }
  });
  test({
    description: "('bytes32', '0x0000000000000000000000000000000000000000000000000000000000000001') -> '0x0000000000000000000000000000000000000000000000000000000000000001'",
    params: {
      responseType: "bytes32",
      abiEncodedRpcResponse: "0x0000000000000000000000000000000000000000000000000000000000000001"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, "0x0000000000000000000000000000000000000000000000000000000000000001");
    }
  });
  test({
    description: "('int256', '0x0000000000000000000000000000000000000000000000000000000000000001') -> '1'",
    params: {
      responseType: "int256",
      abiEncodedRpcResponse: "0x0000000000000000000000000000000000000000000000000000000000000001"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, "1");
    }
  });
  test({
    description: "('uint256', '0x0000000000000000000000000000000000000000000000000000000000000001') -> '1'",
    params: {
      responseType: "uint256",
      abiEncodedRpcResponse: "0x0000000000000000000000000000000000000000000000000000000000000001"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, "1");
    }
  });
  test({
    description: "('int8', '0x01') -> '1'",
    params: {
      responseType: "int8",
      abiEncodedRpcResponse: "0x01"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, "1");
    }
  });
  test({
    description: "('uint8', '0x01') -> '1'",
    params: {
      responseType: "uint8",
      abiEncodedRpcResponse: "0x01"
    },
    assertions: function (decodedRpcResponse) {
      assert.strictEqual(decodedRpcResponse, "1");
    }
  });
  test({
    description: "('int256[]', '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003') -> ['0x0000000000000000000000000000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000000000000000000000000003']",
    params: {
      responseType: "int256[]",
      abiEncodedRpcResponse: "0x"+
        "0000000000000000000000000000000000000000000000000000000000000020"+
        "0000000000000000000000000000000000000000000000000000000000000003"+
        "0000000000000000000000000000000000000000000000000000000000000001"+
        "0000000000000000000000000000000000000000000000000000000000000002"+
        "0000000000000000000000000000000000000000000000000000000000000003"
    },
    assertions: function (decodedRpcResponse) {
      assert.deepEqual(decodedRpcResponse, ["1", "2", "3"]);
    }
  });
  test({
    description: "('bytes32[]', '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003') -> ['0x0000000000000000000000000000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000000000000000000000000003']",
    params: {
      responseType: "bytes32[]",
      abiEncodedRpcResponse: "0x"+
        "0000000000000000000000000000000000000000000000000000000000000020"+
        "0000000000000000000000000000000000000000000000000000000000000003"+
        "0000000000000000000000000000000000000000000000000000000000000001"+
        "0000000000000000000000000000000000000000000000000000000000000002"+
        "0000000000000000000000000000000000000000000000000000000000000003"
    },
    assertions: function (decodedRpcResponse) {
      assert.deepEqual(decodedRpcResponse, [
        "0x0000000000000000000000000000000000000000000000000000000000000001",
        "0x0000000000000000000000000000000000000000000000000000000000000002",
        "0x0000000000000000000000000000000000000000000000000000000000000003"
      ]);
    }
  });
});
